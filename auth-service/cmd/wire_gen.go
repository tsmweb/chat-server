// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/tsmweb/auth-service/helper/database"
	"github.com/tsmweb/auth-service/helper/setting"
	"github.com/tsmweb/auth-service/login"
	"github.com/tsmweb/auth-service/user"
	"github.com/tsmweb/go-helper-api/auth"
	"github.com/tsmweb/go-helper-api/middleware"
)

// Injectors from wire.go:

func InitUserRouter() *user.Router {
	jwt := jwtProvider()
	auth := middleware.NewAuth(jwt)
	database := dataBaseProvider()
	repository := user.NewRepositoryPostgres(database)
	getUseCase := user.NewGetUseCase(repository)
	createUseCase := user.NewCreateUseCase(repository)
	updateUseCase := user.NewUpdateUseCase(repository)
	service := user.NewService(getUseCase, createUseCase, updateUseCase)
	controller := user.NewController(jwt, service)
	router := user.NewRouter(auth, controller)
	return router
}

func InitLoginRouter() *login.Router {
	jwt := jwtProvider()
	auth := middleware.NewAuth(jwt)
	database := dataBaseProvider()
	repository := login.NewRepositoryPostgres(database)
	loginUseCase := login.NewLoginUseCase(repository, jwt)
	updateUseCase := login.NewUpdateUseCase(repository)
	service := login.NewService(loginUseCase, updateUseCase)
	controller := login.NewController(jwt, service)
	router := login.NewRoutes(auth, controller)
	return router
}

// wire.go:

// Data Base
var databaseInstance database.Database

func dataBaseProvider() database.Database {
	if databaseInstance == nil {
		databaseInstance = database.NewPostgresDatabase()
	}

	return databaseInstance
}

// Authentication JWT
var jwtInstance auth.JWT

func jwtProvider() auth.JWT {
	if jwtInstance == nil {
		jwtInstance = auth.NewJWT(setting.PathPrivateKey(), setting.PathPublicKey())
	}

	return jwtInstance
}

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/tsmweb/auth-service/helper/database"
	"github.com/tsmweb/auth-service/helper/setting"
	"github.com/tsmweb/auth-service/profile"
	"github.com/tsmweb/helper-go/auth"
	"github.com/tsmweb/helper-go/middleware"
)

// Injectors from wire.go:

func InitProfileRouter() *profile.Router {
	jwt := jwtProvider()
	auth := middleware.NewAuth(jwt)
	database := dataBaseProvider()
	repository := profile.NewRepositoryPostgres(database)
	getUseCase := profile.NewGetUseCase(repository)
	createUseCase := profile.NewCreateUseCase(repository)
	updateUseCase := profile.NewUpdateUseCase(repository)
	controller := profile.NewController(jwt, getUseCase, createUseCase, updateUseCase)
	router := profile.NewRouter(auth, controller)
	return router
}

// wire.go:

// Data Base
var databaseInstance database.Database

func dataBaseProvider() database.Database {
	if databaseInstance == nil {
		databaseInstance = database.NewPostgresDatabase()
	}

	return databaseInstance
}

// Authentication JWT
var jwtInstance *auth.JWT

func jwtProvider() *auth.JWT {
	if jwtInstance == nil {
		jwtInstance = auth.NewJWT(setting.PathPrivateKey(), setting.PathPublicKey())
	}

	return jwtInstance
}

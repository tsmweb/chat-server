version: "3"

services: 

    postgres:
        image: postgres:14.5
        restart: 'no'
        container_name: postgres-db
        ports: 
            - 5432:5432
        volumes: 
            - pg-data:/var/lib/postgresql/data
        networks:
            - proxy
        environment: 
            POSTGRES_DB: 'postgres'
            POSTGRES_USER: 'postgres'
            POSTGRES_PASSWORD: 'postgres-password'

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        container_name: zookeeper-01
        networks:
            - proxy
        environment: 
            ZOOKEEPER_CLIENT_PORT: 2181

    kafka:
        image: confluentinc/cp-kafka:latest
        container_name: kafka-01
        depends_on:
            - zookeeper
        ports:
            - 9092:9092
            - 9094:9094
        networks:
            - proxy
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://host.docker.internal:9094
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT

    control-center:
        image: confluentinc/cp-enterprise-control-center:6.0.1
        container_name: control-center-01
        hostname: control-center
        depends_on:
            - kafka
        ports:
            - 9021:9021
        networks:
            - proxy
        environment:
            CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
            CONTROL_CENTER_REPLICATION_FACTOR: 1
            CONTROL_CENTER_CONNECT_CLUSTER: http://kafka-connect:8087
            PORT: 9021

    kafka-topics-generator:
        image: confluentinc/cp-kafka:latest
        depends_on:
            - kafka
        networks:
            - proxy
        command: >
            bash -c
            "sleep 10s &&
            kafka-topics --create --topic=USERS --partitions 3 --if-not-exists --bootstrap-server=kafka:9092 &&
            kafka-topics --create --topic=USERS_PRESENCE --partitions 1 --if-not-exists --bootstrap-server=kafka:9092 &&
            kafka-topics --create --topic=NEW_MESSAGES --partitions 3 --if-not-exists --bootstrap-server=kafka:9092 &&
            kafka-topics --create --topic=OFF_MESSAGES --partitions 3 --if-not-exists --bootstrap-server=kafka:9092 &&
            kafka-topics --create --topic=GROUP_EVENTS --partitions 3 --if-not-exists --bootstrap-server=kafka:9092 &&
            kafka-topics --create --topic=CONTACT_EVENTS --partitions 3 --if-not-exists --bootstrap-server=kafka:9092 &&
            kafka-topics --create --topic=CHAT01_MESSAGES --partitions 1 --if-not-exists --bootstrap-server=kafka:9092 &&
            kafka-topics --create --topic=CHAT02_MESSAGES --partitions 1 --if-not-exists --bootstrap-server=kafka:9092 &&
            kafka-topics --create --topic=CHAT03_MESSAGES --partitions 1 --if-not-exists --bootstrap-server=kafka:9092 &&
            kafka-topics --create --topic=EVENTS --partitions 3 --if-not-exists --bootstrap-server=kafka:9092 &&
            kafka-topics --create --topic=METRICS --partitions 3 --if-not-exists --bootstrap-server=kafka:9092"

    nginx:
        image: nginx
        container_name: nginx-01
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
        ports:
            - 80:80
        networks:
            - proxy

    auth-service-01:
        image: tsmweb/auth-service:latest
        container_name: auth-service-01
        depends_on:
            - postgres
            - kafka
        ports:
            - 80
        networks:
            - proxy
        environment:
            HOST_ID: AUTH01
            SERVER_PORT: 80
            EXPIRE_TOKEN: 24
            DB_HOST: postgres
            DB_PORT: 5432
            DB_DATABASE: postgres
            DB_SCHEMA: chat_db
            DB_USER: salesapi
            DB_PASSWORD: password
            KAFKA_BOOTSTRAP_SERVERS: 'kafka:9094'
            KAFKA_CLIENT_ID: AUTH_SERVICE
            KAFKA_EVENTS_TOPIC: EVENTS
    
    auth-service-02:
        image: tsmweb/auth-service:latest
        container_name: auth-service-02
        depends_on:
            - postgres
            - kafka
        ports:
            - 80
        networks:
            - proxy
        environment:
            HOST_ID: AUTH02
            SERVER_PORT: 80
            EXPIRE_TOKEN: 24
            DB_HOST: postgres
            DB_PORT: 5432
            DB_DATABASE: postgres
            DB_SCHEMA: chat_db
            DB_USER: salesapi
            DB_PASSWORD: password
            KAFKA_BOOTSTRAP_SERVERS: 'kafka:9094'
            KAFKA_CLIENT_ID: AUTH_SERVICE
            KAFKA_EVENTS_TOPIC: EVENTS

    user-service-01:
        image: tsmweb/user-service:latest
        container_name: user-service-01
        depends_on:
            - postgres
            - kafka
        ports:
            - 80
        networks:
            - proxy
        environment:
            HOST_ID: USER01
            SERVER_PORT: 80
            DB_HOST: postgres
            DB_PORT: 5432
            DB_DATABASE: postgres
            DB_SCHEMA: chat_db
            DB_USER: salesapi
            DB_PASSWORD: password
            KAFKA_BOOTSTRAP_SERVERS: 'kafka:9094'
            KAFKA_CLIENT_ID: USER_SERVICE
            KAFKA_GROUP_EVENT_TOPIC: GROUP_EVENTS
            KAFKA_CONTACT_EVENT_TOPIC: CONTACT_EVENTS
            KAFKA_EVENTS_TOPIC: EVENTS

    user-service-02:
        image: tsmweb/user-service:latest
        container_name: user-service-02
        depends_on:
            - postgres
            - kafka
        ports:
            - 80
        networks:
            - proxy
        environment:
            HOST_ID: USER02
            SERVER_PORT: 80
            DB_HOST: postgres
            DB_PORT: 5432
            DB_DATABASE: postgres
            DB_SCHEMA: chat_db
            DB_USER: salesapi
            DB_PASSWORD: password
            KAFKA_BOOTSTRAP_SERVERS: 'kafka:9094'
            KAFKA_CLIENT_ID: USER_SERVICE
            KAFKA_GROUP_EVENT_TOPIC: GROUP_EVENTS
            KAFKA_CONTACT_EVENT_TOPIC: CONTACT_EVENTS
            KAFKA_EVENTS_TOPIC: EVENTS

    file-service-01:
        image: tsmweb/file-service:latest
        container_name: file-service-01
        depends_on:
            - postgres
            - kafka
        ports:
            - 80
        networks:
            - proxy
        volumes:
            - ./files:/go/src/files
        environment:
            HOST_ID: FILE01
            SERVER_PORT: 80
            DB_HOST: postgres
            DB_PORT: 5432
            DB_DATABASE: postgres
            DB_SCHEMA: chat_db
            DB_USER: salesapi
            DB_PASSWORD: password
            MAX_UPLOAD_SIZE: 10
            KAFKA_BOOTSTRAP_SERVERS: 'kafka:9094'
            KAFKA_CLIENT_ID: FILE_SERVICE
            KAFKA_EVENTS_TOPIC: EVENTS

    file-service-02:
        image: tsmweb/file-service:latest
        container_name: file-service-02
        depends_on:
            - postgres
            - kafka
        ports:
            - 80
        networks:
            - proxy
        volumes:
            - ./files:/go/src/files
        environment:
            HOST_ID: FILE02
            SERVER_PORT: 80
            DB_HOST: postgres
            DB_PORT: 5432
            DB_DATABASE: postgres
            DB_SCHEMA: chat_db
            DB_USER: salesapi
            DB_PASSWORD: password
            MAX_UPLOAD_SIZE: 10
            KAFKA_BOOTSTRAP_SERVERS: 'kafka:9094'
            KAFKA_CLIENT_ID: FILE_SERVICE
            KAFKA_EVENTS_TOPIC: EVENTS


#     kafka-connect:
#         image: confluentinc/cp-kafka-connect-base:6.0.0
#         container_name: kafka-connect
#         depends_on:
#             - zookeeper
#             - kafka
#         ports:
#             - 8087:8087
#         environment:
#             CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
#             CONNECT_REST_PORT: 8087
#             CONNECT_GROUP_ID: kafka-connect
#             CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
#             CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
#             CONNECT_STATUS_STORAGE_TOPIC: _connect-status
#             CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
#             CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#             CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#             CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#             CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
#             CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
#             CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
#             CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
#             CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
#             CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
#             CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
#             # # Optional settings to include to support Confluent Control Center
#             #   CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
#             #   CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
#             #  ---------------
#             CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
#         volumes:
#             - connect_data:/data
#         command: 
#             - bash
#             - -c
#             - |
#                 echo "Installing Connector"
#                 confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:10.0.1
#                 #
#                 echo "Launching Kafka Connect Worker"
#                 /etc/confluent/docker/run &
#                 #
#                 sleep infinity
#         extra_hosts:
#             - "host.docker.internal:172.17.0.1"

#     # Inserir a entrada `vm.max_map_count = 262144` em /etc/sysctl.conf
#     # Executar o comando `sudo sysctl -w vm.max_map_count=262144`
#     # Reiniciar o docker `sudo systemctl restart docker`
#     es01:
#         image: docker.elastic.co/elasticsearch/elasticsearch:7.11.2
#         container_name: es01
#         ports:
#             - 9200:9200
#             - 9300:9300
#         environment:
#             - node.name=es01
#             - cluster.name=es-docker-cluster
#             - cluster.initial_master_nodes=es01
#             - bootstrap.memory_lock=true
#             - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
#         ulimits:
#             memlock:
#                 soft: -1
#                 hard: -1
#         volumes:
#             - esdata01:/usr/share/elasticsearch/data
#         extra_hosts:
#             - "host.docker.internal:172.17.0.1"

#     kibana:
#         image: docker.elastic.co/kibana/kibana:7.11.2
#         container_name: kibana-01
#         ports:
#             - 5601:5601
#         environment:
#             ELASTICSEARCH_URL: http://es01:9200
#             ELASTICSEARCH_HOSTS: '["http://es01:9200"]'
#         depends_on:
#             - es01
#         extra_hosts:
#             - "host.docker.internal:172.17.0.1"

# volumes:
#     esdata01:
#         driver: local

#     connect_data:
#         driver: local

networks:
    proxy:
        driver: bridge

volumes:
    pg-data:
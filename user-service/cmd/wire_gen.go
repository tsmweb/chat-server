// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/tsmweb/go-helper-api/auth"
	"github.com/tsmweb/go-helper-api/middleware"
	"github.com/tsmweb/user-service/contact"
	"github.com/tsmweb/user-service/group"
	"github.com/tsmweb/user-service/helper/database"
	"github.com/tsmweb/user-service/helper/setting"
)

// Injectors from wire.go:

func InitContactRouter() *contact.Router {
	jwt := jwtProvider()
	auth := middleware.NewAuth(jwt)
	database := dataBaseProvider()
	repository := contact.NewRepositoryPostgres(database)
	getUseCase := contact.NewGetUseCase(repository)
	getAllUseCase := contact.NewGetAllUseCase(repository)
	getPresenceUseCase := contact.NewGetPresenceUseCase(repository)
	createUseCase := contact.NewCreateUseCase(repository)
	updateUseCase := contact.NewUpdateUseCase(repository)
	deleteUseCase := contact.NewDeleteUseCase(repository)
	blockUseCase := contact.NewBlockUseCase(repository)
	unblockUseCase := contact.NewUnblockUseCase(repository)
	service := contact.NewService(getUseCase, getAllUseCase, getPresenceUseCase, createUseCase, updateUseCase, deleteUseCase, blockUseCase, unblockUseCase)
	controller := contact.NewController(jwt, service)
	router := contact.NewRouter(auth, controller)
	return router
}

func InitGroupRouter() *group.Router {
	jwt := jwtProvider()
	auth := middleware.NewAuth(jwt)
	database := dataBaseProvider()
	repository := group.NewRepositoryPostgres(database)
	getUseCase := group.NewGetUseCase(repository)
	getAllUseCase := group.NewGetAllUseCase(repository)
	createUseCase := group.NewCreateUseCase(repository)
	updateUseCase := group.NewUpdateUseCase(repository)
	deleteUseCase := group.NewDeleteUseCase(repository)
	addMemberUseCase := group.NewAddMemberUseCase(repository)
	removeMemberUseCase := group.NewRemoveMemberUseCase(repository)
	setAdminUseCase := group.NewSetAdminUseCase(repository)
	service := group.NewService(getUseCase, getAllUseCase, createUseCase, updateUseCase, deleteUseCase, addMemberUseCase, removeMemberUseCase, setAdminUseCase)
	controller := group.NewController(jwt, service)
	router := group.NewRouter(auth, controller)
	return router
}

// wire.go:

// Data Base
var databaseInstance database.Database

func dataBaseProvider() database.Database {
	if databaseInstance == nil {
		databaseInstance = database.NewPostgresDatabase()
	}

	return databaseInstance
}

// Authentication JWT
var jwtInstance auth.JWT

func jwtProvider() auth.JWT {
	if jwtInstance == nil {
		jwtInstance = auth.NewJWT(setting.PathPrivateKey(), setting.PathPublicKey())
	}

	return jwtInstance
}

// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"github.com/tsmweb/chat-service/api"
	"github.com/tsmweb/chat-service/core"
	"github.com/tsmweb/chat-service/helper/database"
	"github.com/tsmweb/chat-service/helper/setting"
	"github.com/tsmweb/easygo/netpoll"
	"github.com/tsmweb/go-helper-api/auth"
	"github.com/tsmweb/go-helper-api/concurrent/executor"
	"github.com/tsmweb/go-helper-api/middleware"
)

// Injectors from wire.go:

func InitChat(localhost string, exe *executor.Executor) (*api.Router, error) {
	jwt := ProviderJWT()
	auth := middleware.NewAuth(jwt)
	errorDispatcher := core.NewErrorDispatcher()
	config := ProviderPollerConfig(exe, errorDispatcher)
	poller, err := netpoll.New(config)
	if err != nil {
		return nil, err
	}
	repository := core.NewMemoryRepository()
	presenceDispatcher := core.NewPresenceDispatcher()
	userStatusHandler := core.NewUserStatusHandler(repository, presenceDispatcher)
	offlineMessageDispatcher := core.NewOfflineMessageDispatcher()
	groupMessageDispatcher := core.NewGroupMessageDispatcher()
	messageHandler := core.NewMessageHandler(repository, offlineMessageDispatcher, groupMessageDispatcher)
	chat := core.NewChat(poller, exe, localhost, userStatusHandler, messageHandler, errorDispatcher)
	controller := api.NewController(jwt, chat)
	router := api.NewRouter(auth, controller)
	return router, nil
}

// wire.go:

// Data Base
var databaseInstance database.Database

func ProviderDataBase() database.Database {
	if databaseInstance == nil {
		databaseInstance = database.NewPostgresDatabase()
	}

	return databaseInstance
}

// Authentication JWT
var jwtInstance auth.JWT

func ProviderJWT() auth.JWT {
	if jwtInstance == nil {
		jwtInstance = auth.NewJWT(setting.PathPrivateKey(), setting.PathPublicKey())
	}

	return jwtInstance
}

// Poller OnWaitError will be called from goroutine, waiting for events.
func ProviderPollerConfig(exe *executor.Executor, dispatcher *core.ErrorDispatcher) *netpoll.Config {
	return &netpoll.Config{
		OnWaitError: func(err error) {
			exe.Schedule(func(ctx context.Context) {
				dispatcher.Send(err)
			})
		},
	}
}
